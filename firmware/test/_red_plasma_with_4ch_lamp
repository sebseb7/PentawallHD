#!/usr/bin/perl

use Device::SerialPort;
use Time::HiRes qw(usleep time sleep);

use strict;

my $hostname = `hostname`;
chomp $hostname;

my $port = "/dev/cu.usbserial-A100DDXM";
if($hostname eq 'lennyvm')
{
    $port = '/dev/ttyUSB0';
}
    
    
my $port = Device::SerialPort->new($port);
$port->databits(8);
$port->baudrate(500000);
#$port->handshake("xoff");
$port->parity("none");
$port->stopbits(1);
 
my $z = rand(100000);
my $z1 = rand(100000);

my @pixbuf;
foreach my $i (0..2303)
{
    $pixbuf[$i]=0;
}

my @pixbuf_g;
foreach my $i (0..2303)
{
    $pixbuf_g[$i]=0;
}
my @pixbuf_b;
foreach my $i (0..2303)
{
    $pixbuf_b[$i]=0;
}

	$port->write(chr(0x42));
	$port->write(chr(0xff));
	$port->write(chr(0x0));
	$port->write(chr(0x0));
	$port->write(chr(0x0));
	$port->write(chr(0x0));
	$port->write(chr(0x42));
	$port->write(chr(0xef));
	$port->write(chr(0x0));
	$port->write(chr(0x0));
	$port->write(chr(0x0));
	$port->write(chr(0x0));

while(1)
{
	$z+= ((sin($z1))/100);
	$z1+=0.005;
	$port->write(chr(0x23));
	my $time1 = time;
 

	my $pixel = 0;
	my $mod = 0;


	
	foreach my $y (0..23)
	{
		foreach my $x (0..23)
		{

#			my $num = sin($x*3.2+3*sin($z))*40*cos($z*2.1);
#			$num *= abs sin($y*3.1-4)*10 + cos($y*3-sin($z*3))*25 ;

			my $num = (sin($x/(sin(1)+1)+(sin($z)*10))+1)*164;

			$num +=  (sin($y/3+sin(sin($z1*2)*2)*4)+1)*164;

			$num = (sin(($num/80)+(sin($z1)*60))+1)*128;

			my $num_g = (sin(($num/70)+(sin($z1)*60))+1)*128;
#			$num +=  (sin($y/3+sin(sin($z1*2)*2)*5)+1)*142;
			my $num_b = (sin(($num/50)+(sin($z1)*40))+1)*128;

			$num=1 if $num<1;
			$num=255 if $num > 255;
			$num_g=1 if $num_g<1;
			$num_g=255 if $num_g > 255;
			$num_b=1 if $num_b<1;
			$num_b=255 if $num_b > 255;

			$pixbuf[$y*24+$x]=$num;
			
			$pixbuf_g[$y*24+$x]=$num_g;
			$pixbuf_b[$y*24+$x]=$num_b;
		}
	}


	foreach my $y (0..23)
	{
		my $str;
		foreach my $x (0..23)
		{
			$str.=chr($pixbuf[$y*24+$x]).chr($pixbuf_g[$y*24+$x]).chr($pixbuf_b[$y*24+$x]);
		#	$str.=chr($pixbuf_b[$y*24+$x]).chr($pixbuf[$y*24+$x]).chr($pixbuf_g[$y*24+$x]);
		}
		$port->write(&esc($str));
		warn 'x' if &esc($str) =~ /\x42/;
		usleep(100);
	}

	usleep(6000);
	
	$port->write(chr(0x42));
	$port->write(chr(0xff));
	$port->write(esc(chr($pixbuf[1])));
	$port->write(chr(0x0));
	$port->write(chr(0x0));
	$port->write(chr(0x0));

	$port->write(chr(0x42));
	$port->write(chr(0xef));
	$port->write(chr(0x0));
	$port->write(chr(0x0));
	$port->write(chr(0x0));
	$port->write(chr(0x0));
	warn 1 / (time - $time1);
}

$port->close();



sub esc($)
{
    my $data = shift;
    
    
    $data =~ s/\x65/\x65\x3/go;
	$data =~ s/\x23/\x65\x1/go;
	$data =~ s/\x42/\x65\x2/go;
	$data =~ s/\x66/\x65\x4/go;
                                                            
	return $data;
}

